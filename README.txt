# Паралелна имплементация на Smith-Waterman алгоритъм

Този проект предоставя паралелна C++ имплементация на алгоритъма Smith-Waterman за подравняване на биологични последователности, използвайки OpenMP за паралелизация. Кодът е оптимизиран за изпълнение както на локални машини с Visual Studio, така и на суперкомпютърни системи Grid5000.

## Алгоритъм Smith-Waterman

Алгоритъмът Smith-Waterman е метод за локално подравняване на последователности, използван широко в биоинформатиката за откриване на сходни региони между ДНК, РНК или протеинови последователности. Тази имплементация използва паралелна стратегия по диагонали за запълване на матрицата на скоровете, което позволява значително ускорение на алгоритъма при големи последователности.

## Съдържание

- [Изисквания](#изисквания)
- [Файлове в проекта](#файлове-в-проекта)
- [Компилиране](#компилиране)
- [Изпълнение](#изпълнение)
- [Примери за използване](#примери-за-използване)
- [Стартиране в Grid5000](#стартиране-в-grid5000)
- [Сравнение на производителността](#сравнение-на-производителността)
- [Алгоритъм](#алгоритъм)
- [Изходни данни](#изходни-данни)
- [Анализ на производителността](#анализ-на-производителността)
- [Известни проблеми и ограничения](#известни-проблеми-и-ограничения)

## Изисквания

### Локална машина (Windows)
- Visual Studio (2017 или по-нова версия)
- PowerShell 5.0 или по-висока версия
- Входни файлове с последователности (във формат FASTA или обикновен текст)

### Grid5000
- Достъп до Grid5000
- GCC компилатор (с поддръжка на OpenMP)
- PowerShell Core (pwsh)

## Файлове в проекта

- `src/smithwaterman.cpp` - основен C++ източен код на имплементацията
- `scripts/run_smithwaterman.ps1` - PowerShell скрипт за компилиране и изпълнение
- `scripts/generate_random_seq.ps1` - скрипт за генериране на тестови последователности
- `README.md` - този файл с документация

## Компилиране

За да компилирате програмата, използвайте PowerShell скрипта:

```powershell
cd scripts
.\run_smithwaterman.ps1 -Build
```

Скриптът автоматично ще определи дали се изпълнява на локална машина или на Grid5000 и ще използва съответния компилатор и флагове.

## Изпълнение

След компилация, можете да изпълните програмата чрез:

```powershell
.\run_smithwaterman.ps1 -Run -seq1 <път_до_файл1> -seq2 <път_до_файл2> [-threads <брой_нишки>] [-output <изходен_файл>]
```

Параметри:
- `-seq1` и `-seq2`: Пътища до входните файлове с последователности (задължителни)
- `-threads`: Брой нишки за изпълнение (по подразбиране: максимален брой достъпни)
- `-output`: Път до изходния файл (по подразбиране: result.txt)

## Примери за използване

### Компилиране и изпълнение с основни настройки:

```powershell
.\run_smithwaterman.ps1 -Build
.\run_smithwaterman.ps1 -Run -seq1 ..\data\seq1.fa -seq2 ..\data\seq2.fa
```

### Изпълнение с 4 нишки и специфичен изходен файл:

```powershell
.\run_smithwaterman.ps1 -Run -seq1 ..\data\seq1.fa -seq2 ..\data\seq2.fa -threads 4 -output ..\results\alignment_result.txt
```

### Компилиране и изпълнение в един ред:

```powershell
.\run_smithwaterman.ps1 -Build -Run -seq1 ..\data\seq1.fa -seq2 ..\data\seq2.fa
```

### Сравняване на производителността между изпълнения:

```powershell
.\run_smithwaterman.ps1 -Run -seq1 ..\data\seq1.fa -seq2 ..\data\seq2.fa -Compare
```

## Стартиране в Grid5000

За да стартирате програмата в Grid5000, първо се свържете с вашия Grid5000 акаунт:

```bash
ssh username@access.grid5000.fr
```

След това резервирайте възли и изпълнете PowerShell скрипта:

```bash
# Резервиране на възли (пример)
oarsub -I -l nodes=1,walltime=1:00:00

# Преминаване към PowerShell Core (ако е инсталиран)
pwsh

# Изпълнение на скрипта
.\run_smithwaterman.ps1 -Build
.\run_smithwaterman.ps1 -Run -seq1 ..\data\seq1.fa -seq2 ..\data\seq2.fa -threads 8
```

### Съвети за работа с Grid5000

1. **Копиране на файлове към Grid5000**:
   ```bash
   scp -r ./* username@access.grid5000.fr:~/smithwaterman/
   ```

2. **Инсталиране на PowerShell Core на Grid5000** (ако не е инсталиран):
   ```bash
   # Добавяне на Microsoft репозитория
   curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
   sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main" > /etc/apt/sources.list.d/microsoft.list'
   
   # Инсталиране на PowerShell
   sudo apt-get update
   sudo apt-get install -y powershell
   ```

3. **Параметри за резервация на възли**:
   - За експерименти с много нишки: `oarsub -I -l nodes=1,core=36,walltime=1:00:00`
   - За мулти-нодови експерименти: `oarsub -I -l nodes=4,walltime=2:00:00`

## Сравнение на производителността

Скриптът автоматично записва информация за всяко изпълнение в `execution_history.json` файл. Чрез използване на флага `-Compare` при изпълнение, можете да видите разликата в производителността между текущото и предишното изпълнение.

### Пример за изход от сравнение:

```
Сравнение на производителността:
Текущо изпълнение (Grid5000, 2025-04-16 14:30:22): 45.23 секунди
Предишно изпълнение (Local, 2025-04-15 10:15:43): 123.45 секунди
Подобрение: 63.36% по-бързо (78.22 секунди)
```

Това позволява лесно да се проследи разликата в производителността между вашата локална машина и суперкомпютрите в Grid5000.

## Алгоритъм

### Принцип на работа

Smith-Waterman е динамичен алгоритъм, който строи матрица на скоровете, където всяка клетка представлява оптимално локално подравняване до съответната позиция в двете последователности.

### Паралелизация

Тази имплементация използва паралелизация по диагонали, което е ефективна стратегия, тъй като:
1. Всички клетки по диагонал могат да се изчисляват едновременно (нямат зависимости помежду си)
2. Изпълнението се извършва по диагонали, докато се запълни цялата матрица
3. Използва се OpenMP за паралелизация на ниво нишки

### Параметри на алгоритъма

В текущата имплементация се използват следните стойности:
- Награда за съвпадение (match): +2
- Наказание за несъвпадение (mismatch): -1
- Наказание за празнина (gap): -1

Тези параметри могат да бъдат променени директно в кода, ако е необходимо за конкретно приложение.

## Изходни данни

Програмата генерира изходен файл с резултатите от подравняването в следния формат:

```
=== Smith-Waterman Alignment Results ===
Date and Time: 2025-04-16 15:23:45
Number of Threads: 8
Execution Time: 67.89 ms

Sequence 1 Length: 1500
Sequence 2 Length: 2000

Alignment Score: 245
Alignment Start Position (Seq1): 234
Alignment Start Position (Seq2): 456

Aligned Sequence 1: ACGTACGTACGT-ACGTACGT
Aligned Sequence 2: ACGTACGTA-GTAACGTACGT
```

Файлът включва:
- Информация за изпълнението (дата, време, брой нишки)
- Времето за изпълнение в милисекунди
- Дължините на входните последователности
- Скора на оптималното подравняване
- Началните позиции на подравняването във всяка последователност
- Самите подравнени последователности с добавени дефиси ("-") за празнините

## Анализ на производителността

### Мащабируемост

Алгоритъмът показва добра мащабируемост с увеличаване на броя нишки до определен момент, който зависи от размера на входните последователности. За малки последователности (под 1000 символа), увеличаването на броя нишки над 4-8 обикновено не води до значително подобрение поради режийните разходи за създаване и управление на нишките.

### Сравнение Локално vs. Grid5000

При експерименти с големи последователности (над 10000 символа), Grid5000 обикновено осигурява 3-10 пъти по-добра производителност в сравнение с типичен домашен компютър, в зависимост от:
- Броя заявени ядра в Grid5000
- Конфигурацията на локалната машина
- Размера на входните последователности

## Известни проблеми и ограничения

1. **Използване на памет**: За много големи последователности (милиони символи), алгоритъмът може да изисква значително количество памет поради използването на цялата матрица на скоровете.

2. **Строгост на паралелизацията**: Текущата имплементация паралелизира само запълването на матрицата, но не и проследяването на пътя назад (backtracking), което може да ограничи производителността при някои случаи.

3. **Visual Studio специфики**: Ако използвате по-стара версия на Visual Studio, може да е необходимо да промените флаговете за компилиране в PowerShell скрипта.

4. **Входни файлове**: Програмата очаква входни файлове във формат FASTA или като обикновен текст. Други формати не се поддържат без модификация на кода.

5. **Grid5000 особености**: Ако Grid5000 конфигурацията се промени, може да е необходимо да се адаптира скриптът за компилация и изпълнение.

## Бъдещи подобрения

Следните подобрения могат да бъдат разгледани за бъдещи версии:

1. Оптимизация на паметта чрез съхранение само на необходимите редове/колони на матрицата
2. CUDA имплементация за изпълнение на GPU ускорители
3. Паралелизация на backtracking фазата
4. Поддръжка на повече входни формати и опции за алгоритъма
5. Визуализация на подравняването за по-добро тълкуване на резултатите
